---
interface Props {
  imageData: any;
}
const baseUrl = import.meta.env.BASE_URL;
const { imageData } = Astro.props;
---

<!-- Modal for full-screen image viewing -->
<div id="imageModal" class="modal">
  <span class="modal__close" onclick="closeModal()">&times;</span>
  <button class="modal__arrow modal__arrow--left" onclick="changeImage(-1)"
    >&#10094;</button
  >
  <button class="modal__arrow modal__arrow--right" onclick="changeImage(1)"
    >&#10095;</button
  >
  <img class="modal__content" id="modalImage" alt="" />
  <div class="modal__caption" id="modalCaption"></div>
</div>

<script define:vars={{ imageData, baseUrl }}>
  // Global variables for carousel functionality
  let currentImageIndex = 0;
  let allImages = [];

  // Make functions globally accessible by explicitly assigning to window
  window.openModal = function (img) {
    const modal = document.getElementById("imageModal");
    const modalImg = document.getElementById("modalImage");
    const caption = document.getElementById("modalCaption");

    if (modal && modalImg && caption) {
      // Collect all images for carousel
      collectAllImages();

      // Find the index of the clicked image
      const clickedSrc = img.dataset.srcOriginal || img.src;
      currentImageIndex = allImages.findIndex(
        (image) =>
          image.src === clickedSrc || image.srcOriginal === clickedSrc,
      );

      // If not found, default to 0
      if (currentImageIndex === -1) {
        currentImageIndex = 0;
      }

      // Show the modal with current image
      showCurrentImage();
      modal.style.display = "block";

      // Prevent body scroll when modal is open
      document.body.style.overflow = "hidden";
    }
  };

  function collectAllImages() {
    allImages = [];

    // Add main image
    const mainImage = {
      src: `${baseUrl}${imageData.src}`,
      srcOriginal: `${baseUrl}${imageData.srcOriginal || imageData.src}`,
      alt: imageData.alt,
    };
    allImages.push(mainImage);

    // Add additional photos if they exist
    if (
      imageData.additionalPhotos &&
      imageData.additionalPhotos.length > 0
    ) {
      imageData.additionalPhotos.forEach((photo) => {
        allImages.push({
          src: `${baseUrl}${photo.src}`,
          srcOriginal: `${baseUrl}${photo.srcOriginal || photo.src}`,
          alt: photo.alt,
        });
      });
    }
  }

  function showCurrentImage() {
    const modalImg = document.getElementById("modalImage");
    const caption = document.getElementById("modalCaption");

    if (allImages.length > 0 && modalImg && caption) {
      const currentImage = allImages[currentImageIndex];
      modalImg.src = currentImage.srcOriginal;
      caption.innerHTML = currentImage.alt;
    }
  }

  let isAnimating = false;

  window.changeImage = function (direction) {
    if (allImages.length <= 1) return;
    if (isAnimating) return;

    const modalImg = document.getElementById("modalImage");
    if (!modalImg) return;

    isAnimating = true;

    // Choose classes by direction
    const outClass =
      direction > 0
        ? "modal__content--out-left"
        : "modal__content--out-right";
    const inClass =
      direction > 0
        ? "modal__content--in-right"
        : "modal__content--in-left";

    // Play OUT animation
    modalImg.classList.remove(
      "modal__content--out-left",
      "modal__content--out-right",
      "modal__content--in-left",
      "modal__content--in-right",
    );
    modalImg.classList.add(outClass);

    const onOutEnd = () => {
      modalImg.removeEventListener("animationend", onOutEnd);

      // Update index
      currentImageIndex += direction;
      if (currentImageIndex >= allImages.length) {
        currentImageIndex = 0;
      } else if (currentImageIndex < 0) {
        currentImageIndex = allImages.length - 1;
      }

      const currentImage = allImages[currentImageIndex];
      modalImg.src = currentImage.srcOriginal;
      const caption = document.getElementById("modalCaption");
      if (caption) caption.innerHTML = currentImage.alt;

      // Play IN animation
      modalImg.classList.remove(outClass);
      modalImg.classList.add(inClass);

      const onInEnd = () => {
        modalImg.removeEventListener("animationend", onInEnd);
        modalImg.classList.remove(inClass);
        isAnimating = false;
      };

      modalImg.addEventListener("animationend", onInEnd);
    };

    modalImg.addEventListener("animationend", onOutEnd);
  };

  window.closeModal = function () {
    const modal = document.getElementById("imageModal");
    if (modal) {
      modal.style.display = "none";

      // Restore body scroll
      document.body.style.overflow = "auto";
    }
  };

  // Close modal when clicking outside the image
  document.addEventListener("DOMContentLoaded", function () {
    const modal = document.getElementById("imageModal");
    if (modal) {
      modal.onclick = function (event) {
        if (event.target === modal) {
          window.closeModal();
        }
      };
    }
  });

  // Close modal with Escape key
  document.addEventListener("keydown", function (event) {
    if (event.key === "Escape") {
      window.closeModal();
    }
  });

  // Arrow key navigation
  document.addEventListener("keydown", function (event) {
    const modal = document.getElementById("imageModal");
    if (modal && modal.style.display === "block") {
      if (event.key === "ArrowLeft") {
        window.changeImage(-1);
      } else if (event.key === "ArrowRight") {
        window.changeImage(1);
      }
    }
  });
</script>

