---
import "../../styles/global.scss";
import Header from "../../components/Header.astro";
import galleryData from "../../data/gallery.json";

export async function getStaticPaths() {
  // Collect all images from all collections
  const allImages = [
    ...galleryData.freedomCollection,
    ...galleryData.allPaintingCollection,
    ...galleryData.artCollection,
    galleryData.galleryContent.featured,
    ...galleryData.galleryContent.items,
  ];

  return allImages.map((image) => ({
    params: { id: image.id },
    props: { image },
  }));
}

const { image } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link
      rel="icon"
      type="image/svg+xml"
      href={`${import.meta.env.BASE_URL}favicon.svg`}
    />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{image.alt} - Artist Gallery Portfolio</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:wght@400&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <Header />

    <main class="artwork-detail">
      <div class="artwork-detail__container">
        <div class="artwork-detail__wrapper">
          <div class="artwork-detail__main-image">
            <img
              src={`${import.meta.env.BASE_URL}${image.src}`}
              alt={image.alt}
              class="artwork-detail__image"
              data-src-original={`${import.meta.env.BASE_URL}${(image as any).srcOriginal || image.src}`}
              onclick="openModal(this)"
            />
          </div>

          <div class="artwork-detail__wrapper-title">
            <h1 class="artwork-detail__title">{image.alt}</h1>
            {
              image.description && (
                <p class="artwork-detail__description">{image.description}</p>
              )
            }
            {
              image.medium && (
                <p class="artwork-detail__medium">{image.medium}</p>
              )
            }
            {image.size && <p class="artwork-detail__size">{image.size}</p>}
            {image.price && <p class="artwork-detail__price">{image.price}</p>}

            {
              image.additionalPhotos && image.additionalPhotos.length > 0 && (
                <div class="artwork-detail__additional-photos">
                  <h2 class="artwork-detail__additional-title">
                    Additional Details
                  </h2>
                  <div class="artwork-detail__gallery">
                    {image.additionalPhotos.map((photo) => (
                      <div class="artwork-detail__gallery-item">
                        <img
                          src={`${import.meta.env.BASE_URL}${photo.src}`}
                          alt={photo.alt}
                          class="artwork-detail__gallery-image"
                          data-src-original={`${import.meta.env.BASE_URL}${photo.src}`}
                          onclick="openModal(this)"
                        />
                      </div>
                    ))}
                  </div>
                </div>
              )
            }
          </div>
        </div>
      </div>
    </main>

    <!-- Modal for full-screen image viewing -->
    <div id="imageModal" class="modal">
      <span class="modal__close" onclick="closeModal()">&times;</span>
      <img class="modal__content" id="modalImage" alt="" />
      <div class="modal__caption" id="modalCaption"></div>
    </div>

    <script is:inline>
      function openModal(img) {
        const modal = document.getElementById("imageModal");
        const modalImg = document.getElementById("modalImage");
        const caption = document.getElementById("modalCaption");

        if (modal && modalImg && caption) {
          modal.style.display = "block";
          modalImg.src = img.dataset.srcOriginal || img.src;
          caption.innerHTML = img.alt;

          // Prevent body scroll when modal is open
          document.body.style.overflow = "hidden";
        }
      }

      function closeModal() {
        const modal = document.getElementById("imageModal");
        if (modal) {
          modal.style.display = "none";

          // Restore body scroll
          document.body.style.overflow = "auto";
        }
      }

      // Close modal when clicking outside the image
      document.addEventListener("DOMContentLoaded", function () {
        const modal = document.getElementById("imageModal");
        if (modal) {
          modal.onclick = function (event) {
            if (event.target === modal) {
              closeModal();
            }
          };
        }
      });

      // Close modal with Escape key
      document.addEventListener("keydown", function (event) {
        if (event.key === "Escape") {
          closeModal();
        }
      });
    </script>
  </body>
</html>
